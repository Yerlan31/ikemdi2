version: '3.9'
services:
  frontend:
    build: ./frontend
    platform: linux/x86_64
    # ...
    ports:
      - 3000:3000
    container_name: app_frontend
    depends_on:
      backend:
        condition: service_healthy
    # Os `healthcheck` devem garantir que a aplicação
    # está operacional, antes de liberar o container
    healthcheck:
      test: [ "CMD", "lsof", "-t", "-i:3000" ]  # Caso utilize outra porta interna para o front, altere ela aqui também
      timeout: 10s
      retries: 5
  backend:
    build: ./backend
    platform: linux/x86_64
    restart: 'always'
    # ...
    ports:
      - 3001:3001
    container_name: app_backend
    command: npm run dev
    volumes:
      - './backend/src:/app/src'
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PORT=3001
      # Os dados abaixo se referem ao container `db`
      # Dica: Relembre aqui da comunicação interna entre containers
      - DB_USER=postgres
      - DB_PASS=postgres
      - DB_HOST=localhost
      - DB_NAME=judo
      - DB_PORT=5432
    healthcheck:
      test: [ "CMD", "lsof", "-t", "-i:3001" ] # Caso utilize outra porta interna para o back, altere ela aqui também
      timeout: 10s
      retries: 5
  db:
    image: postgres
    container_name: db
    platform: linux/x86_64
    ports:
      - 5433:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=judo
    restart: 'always'
    cap_add:
      - SYS_NICE # Deve omitir alertas menores
